<!-- html解析组件，将富文本字符串解析为html  -->
<!--
  属性：
  parserName        命名parser字符串
  parserContent     富文本字符串
  parserType        解析类型type
  parserPadding     为当图片自适应是左右的单一padding（默认为0）
-->
<style lang="less">
  @import "./lib/wxParse.wxss";

  .wxParse-img {
    /*margin: 0 auto;*/
    /*width: 100%;*/
    /*min-height: ~"200rpx";*/
    /*display: block;*/
    /*background-color: transparent;*/
  }
</style>

<template>
  <import src="./lib/wxParse.wxml"/>
  <block wx:for="{{htmlParserTpl.nodes}}" wx:key="{{index}}">
    <template is="wxParse0" data="{{item}}"/>
  </block>
</template>

<script>
  import wepy from 'wepy';
  import WxParse from './lib/wxParse.js';

  export default class HTMLParser extends wepy.component {
    props = {
      parserName: {
        type: String,
        default: 'htmlParserName'
      },
      parserContent: {
        type: String,
        default: '<p style=\'font-size: 32rpx; padding: 30rpx 0; text-align: center;\'>没有任何内容</p>'
      },
      parserType: {
        type: String,
        default: 'html'
      },
      parserPadding: {
        type: Number,
        default: 0
      }
    };

    data = {
      htmlParserTpl: {},
      bindData: {}
    };

    events = {
      'htmlParser-broadcast': ($event, ...args) => {
      }
    };

    methods = {
      htmlParserNotice() {
        this.htmlParse();
      }
    };

    onLoad() {
//      this.htmlParse()
    }

    wxParseImgLoad(image) {
    }

    htmlParse() {
      /**
       * WxParse.wxParse(bindName , type, data, target,imagePadding)
       * 1.bindName绑定的数据名(必填)
       * 2.type可以为html或者md(必填)
       * 3.data为传入的具体数据(必填)
       * 4.target为Page对象,一般为this(必填)
       * 5.imagePadding为当图片自适应是左右的单一padding(默认为0,可选)
       */
      try {
        let temp = new Date().getTime();
        let htmlContent = WxParse.wxParse(this.parserName, this.parserType, this.parserContent || this.props.parserContent.default, this, this.parserPadding);
//        this.htmlParserTpl = this[this.parserName];
        this.htmlParserTpl = htmlContent[this.parserName];
        console.log('htmlParserTp1数据', this.htmlParserTpl);
        this.$apply();
        console.log('到富文本字符串解析完成所需时间：', new Date().getTime() - temp + 'ms');
      } catch (e) {
        console.warn('kinerHtmlParser:', '错误信息', e);
      }
    }

    watch = {
      // 动态传值，监听
      parserContent(newValue, oldValue) {
        console.log('htmlData传递到BaseHtmlParser组件成功');
        console.log('执行wxparse方法');
        this.htmlParse();    //执行解析
      }
    };
  }
</script>
